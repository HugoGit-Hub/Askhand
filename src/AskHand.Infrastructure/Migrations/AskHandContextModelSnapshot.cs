// <auto-generated />
using System;
using AskHand.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AskHand.Infrastructure.Migrations
{
    [DbContext(typeof(AskHandContext))]
    partial class AskHandContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AskHand.Domain.Climbs.Climb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimationTime")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ValidationRate")
                        .HasColumnType("float");

                    b.Property<Guid?>("WallId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WallId");

                    b.ToTable("Climbs");
                });

            modelBuilder.Entity("AskHand.Domain.Friendships.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndFriendshipDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartFriendshipDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserIdOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserIdTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("AskHand.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AskHand.Domain.Walls.Wall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Walls");
                });

            modelBuilder.Entity("AskHand.Domain.Climbs.Climb", b =>
                {
                    b.HasOne("AskHand.Domain.Users.User", null)
                        .WithMany("Climbs")
                        .HasForeignKey("UserId");

                    b.HasOne("AskHand.Domain.Walls.Wall", null)
                        .WithMany("Climbs")
                        .HasForeignKey("WallId");
                });

            modelBuilder.Entity("AskHand.Domain.Users.User", b =>
                {
                    b.OwnsOne("AskHand.Domain.Emails.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AskHand.Domain.Passwords.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AskHand.Domain.Skills.Skill", "Skill", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AskHand.Domain.Cities.City", "City", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AskHand.Domain.Countries.Country", "Country", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AskHand.Domain.Users.UserMetaData", "MetaData", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Age")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("PictureProfilPath")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("City")
                        .IsRequired();

                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("MetaData")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Skill")
                        .IsRequired();
                });

            modelBuilder.Entity("AskHand.Domain.Walls.Wall", b =>
                {
                    b.OwnsOne("AskHand.Domain.Addresses.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("WallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WallId");

                            b1.ToTable("Walls");

                            b1.WithOwner()
                                .HasForeignKey("WallId");

                            b1.OwnsOne("AskHand.Domain.Cities.City", "City", b2 =>
                                {
                                    b2.Property<Guid>("AddressWallId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AddressWallId");

                                    b2.ToTable("Walls");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressWallId");
                                });

                            b1.OwnsOne("AskHand.Domain.Countries.Country", "Country", b2 =>
                                {
                                    b2.Property<Guid>("AddressWallId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AddressWallId");

                                    b2.ToTable("Walls");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressWallId");
                                });

                            b1.OwnsOne("AskHand.Domain.ZipCodes.ZipCode", "ZipCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressWallId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AddressWallId");

                                    b2.ToTable("Walls");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressWallId");
                                });

                            b1.Navigation("City")
                                .IsRequired();

                            b1.Navigation("Country")
                                .IsRequired();

                            b1.Navigation("ZipCode")
                                .IsRequired();
                        });

                    b.OwnsOne("AskHand.Domain.Levels.Level", "Level", b1 =>
                        {
                            b1.Property<Guid>("WallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Rate")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WallId");

                            b1.ToTable("Walls");

                            b1.WithOwner()
                                .HasForeignKey("WallId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Level")
                        .IsRequired();
                });

            modelBuilder.Entity("AskHand.Domain.Users.User", b =>
                {
                    b.Navigation("Climbs");
                });

            modelBuilder.Entity("AskHand.Domain.Walls.Wall", b =>
                {
                    b.Navigation("Climbs");
                });
#pragma warning restore 612, 618
        }
    }
}
